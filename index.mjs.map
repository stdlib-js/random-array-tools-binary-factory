{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport BinaryRandom from '@stdlib/random-array-tools-binary';\nimport NullaryRandom from '@stdlib/random-array-tools-nullary';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a factory function for generating pseudorandom values drawn from a binary PRNG.\n*\n* @param {Function} prng - binary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new binary pseudorandom value generator\n* @param {StringArray} dtypes - list of supported output array data types\n* @param {string} dtype - default output array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be a supported output array data type\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* import arcsine from '@stdlib/random-base-arcsine';\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( arcsine, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0 );\n* // returns <Float64Array>\n*\n* @example\n* import arcsine from '@stdlib/random-base-arcsine';\n*\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var factory = createFactory( arcsine, dtypes, 'float64' );\n* // returns <Function>\n*\n* var random = factory();\n* // returns <Function>\n*\n* var x = random( 10, 2.0, 5.0, {\n*     'dtype': 'float32'\n* });\n* // returns <Float32Array>\n*/\nfunction createFactory( prng, dtypes, dtype ) {\n\tvar isValidDataType;\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( '1qh3c', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( '1qhFM', 'factory' ) );\n\t}\n\t// TODO: tighten this up by actually validating that `dtypes` contains only recognized/supported dtype strings\n\tif ( !isStringArray( dtypes ) ) {\n\t\tthrow new TypeError( format( '1qhFN', dtypes ) );\n\t}\n\t// Require that the default output array data type be a member of the list of supported output array data types...\n\tif ( !contains( dtypes, dtype ) ) {\n\t\tthrow new TypeError( format( '1qhFO', dtype ) );\n\t}\n\tisValidDataType = contains( dtypes );\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a PRNG.\n\t*\n\t* @private\n\t* @param {*} [param1] - first PRNG parameter\n\t* @param {*} [param2] - second PRNG parameter\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @param {string} [options.dtype] - default output array data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating arrays\n\t*/\n\tfunction factory() {\n\t\tvar Random;\n\t\tvar random;\n\t\tvar param1;\n\t\tvar param2;\n\t\tvar assign;\n\t\tvar nargs;\n\t\tvar base;\n\t\tvar opts;\n\t\tvar rand;\n\t\tvar dt;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs < 1 ) {                              // e.g., factory()\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 1 ) {                     // e.g., factory( {} )\n\t\t\topts = arguments[ 0 ];\n\t\t\tbase = prng.factory( opts );\n\t\t\trand = rand1;\n\t\t} else if ( nargs === 2 ) {                     // e.g., factory( param1, param2 )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\topts = {};\n\t\t\tbase = prng.factory( param1, param2 );\n\t\t\trand = rand2;\n\t\t} else {                                        // e.g., factory( param1, param2, {} )\n\t\t\tparam1 = arguments[ 0 ];\n\t\t\tparam2 = arguments[ 1 ];\n\t\t\topts = arguments[ 2 ];\n\t\t\tbase = prng.factory( param1, param2, opts );\n\t\t\trand = rand2;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'dtype' ) ) {\n\t\t\tdt = opts.dtype;\n\t\t\tif ( !isValidDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( '1qh4S', 'dtype', dtypes.join( '\", \"' ), dt ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdt = dtype;\n\t\t}\n\t\tif ( rand === rand1 ) {\n\t\t\tassign = assign1;\n\t\t\tRandom = BinaryRandom;\n\t\t} else {\n\t\t\tassign = assign2;\n\t\t\tRandom = NullaryRandom;\n\t\t}\n\t\trandom = new Random( base, dtypes, dt );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand1( len, param1, param2, options ) {\n\t\t\tif ( arguments.length < 4 ) {\n\t\t\t\treturn random.generate( len, param1, param2 );\n\t\t\t}\n\t\t\treturn random.generate( len, param1, param2, options );\n\t\t}\n\n\t\t/**\n\t\t* Returns an array of pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} len - output array length\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output array data type\n\t\t* @throws {TypeError} first argument must be a nonnegative integer\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction rand2( len, options ) {\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn random.generate( len );\n\t\t\t}\n\t\t\treturn random.generate( len, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {*} param1 - first PRNG parameter\n\t\t* @param {*} param2 - second PRNG parameter\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} third argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign1( param1, param2, out ) {\n\t\t\treturn random.assign( param1, param2, out );\n\t\t}\n\n\t\t/**\n\t\t* Fills an array with pseudorandom values drawn from a PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {Collection} out - output array\n\t\t* @throws {TypeError} first argument must be a collection\n\t\t* @returns {Collection} output array\n\t\t*/\n\t\tfunction assign2( out ) {\n\t\t\treturn random.assign( out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom number generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default createFactory;\n"],"names":["createFactory","prng","dtypes","dtype","isValidDataType","isFunction","TypeError","format","isMethodIn","isStringArray","contains","Random","random","param1","param2","assign","nargs","base","opts","rand","dt","arguments","length","rand1","factory","rand2","hasOwnProp","join","out","BinaryRandom","NullaryRandom","setReadOnly","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","PRNG","seed","seedLength","state","s","stateLength","byteLength","len","options","generate"],"mappings":";;s0CAkFA,SAASA,EAAeC,EAAMC,EAAQC,GACrC,IAAIC,EACJ,IAAMC,EAAYJ,GACjB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,IAAMO,EAAYP,EAAM,WACvB,MAAM,IAAIK,UAAWC,EAAQ,QAAS,YAGvC,IAAME,EAAeP,GACpB,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAGvC,IAAMQ,EAAUR,EAAQC,GACvB,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAGvC,OADAC,EAAkBM,EAAUR,GAoB5B,WACC,IAAIS,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJJ,EAAQK,UAAUC,OACbN,EAAQ,GACZE,EAAO,CAAA,EACPD,EAAOhB,EACPkB,EAAOI,GACc,IAAVP,GACXE,EAAOG,UAAW,GAClBJ,EAAOhB,EAAKuB,QAASN,GACrBC,EAAOI,GACc,IAAVP,GACXH,EAASQ,UAAW,GACpBP,EAASO,UAAW,GACpBH,EAAO,CAAA,EACPD,EAAOhB,EAAKuB,QAASX,EAAQC,GAC7BK,EAAOM,IAEPZ,EAASQ,UAAW,GACpBP,EAASO,UAAW,GACpBH,EAAOG,UAAW,GAClBJ,EAAOhB,EAAKuB,QAASX,EAAQC,EAAQI,GACrCC,EAAOM,GAER,GAAKC,EAAYR,EAAM,UAEtB,GADAE,EAAKF,EAAKf,OACJC,EAAiBgB,GACtB,MAAM,IAAId,UAAWC,EAAQ,QAAS,QAASL,EAAOyB,KAAM,QAAUP,SAGvEA,EAAKjB,EAEDgB,IAASI,GACbR,EA0ED,SAAkBF,EAAQC,EAAQc,GACjC,OAAOhB,EAAOG,OAAQF,EAAQC,EAAQc,EACtC,EA3EAjB,EAASkB,IAETd,EAmFD,SAAkBa,GACjB,OAAOhB,EAAOG,OAAQa,EACtB,EApFAjB,EAASmB,GAEVlB,EAAS,IAAID,EAAQM,EAAMf,EAAQkB,GAC9BF,GAAQA,EAAKjB,MACjB8B,EAAaZ,EAAM,OAAQ,MAC3BY,EAAaZ,EAAM,aAAc,MACjCa,EAAsBb,EAAM,QAASc,EAAkB,MAAQC,GAC/DH,EAAaZ,EAAM,cAAe,MAClCY,EAAaZ,EAAM,aAAc,QAEjCgB,EAAqBhB,EAAM,QAkF5B,WACC,OAAOA,EAAKiB,KAAKC,IACjB,IAnFAF,EAAqBhB,EAAM,cA2F5B,WACC,OAAOA,EAAKiB,KAAKE,UACjB,IA5FAN,EAAsBb,EAAM,SAwH7B,WACC,OAAOA,EAAKiB,KAAKG,KACjB,IASD,SAAmBC,GAClBrB,EAAKiB,KAAKG,MAAQC,CAClB,IApIAL,EAAqBhB,EAAM,eAmG5B,WACC,OAAOA,EAAKiB,KAAKK,WACjB,IApGAN,EAAqBhB,EAAM,cA4G5B,WACC,OAAOA,EAAKiB,KAAKM,UACjB,KA1GD,OAFAX,EAAaZ,EAAM,OAAQF,EAAKmB,MAChCL,EAAaZ,EAAM,SAAUJ,GACtBI,EAgBP,SAASI,EAAOoB,EAAK9B,EAAQC,EAAQ8B,GACpC,OAAKvB,UAAUC,OAAS,EAChBV,EAAOiC,SAAUF,EAAK9B,EAAQC,GAE/BF,EAAOiC,SAAUF,EAAK9B,EAAQC,EAAQ8B,EAC7C,CAcD,SAASnB,EAAOkB,EAAKC,GACpB,OAAKvB,UAAUC,OAAS,EAChBV,EAAOiC,SAAUF,GAElB/B,EAAOiC,SAAUF,EAAKC,EAC7B,CAwFD,CACF"}